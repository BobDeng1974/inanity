Есть два типа объектов.
Expression - шаблонные объекты-выражения. Это типа умных указателей для Node, но поддерживающих удобные операции (операторы, методы и т.д.). Для обеспечения типовой безопасности классы Expression шаблонные, и типизируются соответствующими типами.
Node - внутренний объект выражения. Не типизируется, не шаблонный (решено, что так проще генераторам кода). За соответствием типов будет следить Expression.
ValueExpression - "числовое" выражение, включаюшее в себя скаляры, векторы и матрицы типов int, uint, float, bool.
LValueExpression - унаследован от ValueExpression. Добавляет возможность присваивания.
SamplerExpression - семплер. Умеет только брать семплы (разными способами).

OperationExpression - выражение, которое комбинирует несколько ValueExpression, и выдаёт тоже ValueExpression. OperationExpression различаются по enum'у, сообщающему тип.

Оператор присваивания LValueExpression будет создавать AssignExpression. А конструктор копирования создаёт копию! Поэтому сохранять LValueExpression (и другие Expression) нужно аккуратно, только конструктором копирования. Кроме LValueExpression, остальные Expression явно запрещают оператор присваивания.

Expression-классы должны выдерживать приведение к Expression (то есть, к родительскому типу, не к указателю, а именно к типу). То есть, не иметь виртуального деструктора, и не содержать лишних данных.

Некоторые Expression-классы в имени не содержат слова Expression, как Attribute или Uniform. Это просто для удобства.