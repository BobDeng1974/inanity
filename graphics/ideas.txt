Сначала создаётся объект Device. Он олицетворяет реальное графическое устройство (видеокарту), и имеет методы для создания ресурсов видеокарты (текстур, различных буферов и так далее). Затем Device создаёт объект Presenter, олицетворяющий, грубо говоря, область вывода (а в DX11 - SwapChain). Он создаётся для указанного монитора, и/или для указанного окна. Каждый Presenter имеет свою пару буферов для вывода (первичный и вторичный). Теоретически, для одного Device может быть несколько Presenter'ов, и они будут разделять ресурсы видеокарты (а куда они денутся), но это, конечно, надо протестировать.
Также класс окна Window теперь не принадлежит графической подсистеме, так как окно не обязательно означает графику и шейдеры. Окно используется и для простых вещей, тем более что на разных платформах на окна навешены ещё и "неправильные" обязанности, такие как обработка ввода, или получение сообщений об общесистемных событиях.
Окно может создавать Output - область вывода. Вот эта штука уже принадлежит графике, и именно с ней работает Presenter.
По новой стратегии, классы конкретной графической подсистемы, такой, как DX или GL, должны быть как можно более примитивными. Более высокоуровневые классы должны быть уже независимыми от графической платформы.

DirectX 11
DxDevice отвечает за ID3D11Device.
DxPresenter отвечает за IDXGISwapChain и IDXGIOutput. Пока IDXGIOutput никак нельзя задать вручную, то есть он будет всегда один. Также IDXGIOutput вроде как нельзя включить в Win32Output, так как он должен работать и с OpenGL.
